---

---

<div class="avatar-container">
  <video class="avatar-video-light hidden" autoplay loop muted playsinline>
    <source src="/assets/video/light-avatar.mp4" type="video/mp4" />
    您的浏览器不支持视频标签。
  </video>
  <video class="avatar-video-night hidden" autoplay loop muted playsinline>
    <source src="/assets/video/night-avatar.mp4" type="video/mp4" />
    您的浏览器不支持视频标签。
  </video>
</div>

<style>
  .avatar-container {
    width: 100%;
    height: 100%;
    min-width: 100px;
    min-height: 100px;
    border-radius: 50%;

    & video {
      width: 100%;
      height: 100%;
      border-radius: 50%;
    }

    /* & .avatar-video-night {
    } */
    & .avatar-video-light {
      transform: scale(0.8);
    }
  }
</style>

<script>
  function changeAvatar(theme: string | null) {
    const lightDoms = document.querySelectorAll(".avatar-video-light");
    const darkDoms = document.querySelectorAll(".avatar-video-night");

    lightDoms.forEach((item) => {
      if (theme === "dark") {
        item.classList.add("hidden");
      } else {
        item.classList.remove("hidden");
      }
    });

    darkDoms.forEach((item) => {
      if (theme === "dark") {
        item.classList.remove("hidden");
      } else {
        item.classList.add("hidden");
      }
    });
  }

  function initAvatar() {
    const theme = document.documentElement.getAttribute("data-theme");
    changeAvatar(theme);

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (
          mutation.type === "attributes" &&
          mutation.attributeName === "data-theme"
        ) {
          const newTheme = document.documentElement.getAttribute("data-theme");
          changeAvatar(newTheme);
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme"],
    });
  }

  // 确保在 DOM 加载完成后初始化
  document.addEventListener("DOMContentLoaded", initAvatar);
</script>
